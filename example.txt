import Papa from 'papaparse';

interface Task {
  _id: string;
  user: string;
  contract: {
    slug: string;
    contractAddress: string;
  };
  wallet: {
    address: string;
    privateKey: string;
    openseaApproval: boolean;
    blurApproval: boolean;
    magicedenApproval: boolean;
  };
  selectedMarketplaces: string[];
  running: boolean;
  tags: { name: string; color: string }[];
  selectedTraits: Record<
    string,
    { name: string; availableInMarketplaces: string[] }[]
  >;
  traits: {
    categories: Record<string, string>;
    counts: Record<
      string,
      Record<
        string,
        {
          count: number;
          availableInMarketplaces: string[];
          magicedenFloor: number;
          blurFloor: number;
          openseaFloor: number;
        }
      >
    >;
  };
  outbidOptions: {
    outbid: boolean;
    blurOutbidMargin: number | null;
    openseaOutbidMargin: number | null;
    magicedenOutbidMargin: number | null;
    counterbid: boolean;
  };
  bidPrice: {
    min: number;
    max: number | null;
    minType: "percentage" | "eth";
    maxType: "percentage" | "eth";
  };
  openseaBidPrice: {
    min: number;
    max: number | null;
    minType: "percentage" | "eth";
    maxType: "percentage" | "eth";
  };
  blurBidPrice: {
    min: number;
    max: number | null;
    minType: "percentage" | "eth";
    maxType: "percentage" | "eth";
  };
  magicEdenBidPrice: {
    min: number;
    max: number | null;
    minType: "percentage" | "eth";
    maxType: "percentage" | "eth";
  };
  stopOptions: {
    minFloorPrice: number | null;
    maxFloorPrice: number | null;
    minTraitPrice: number | null;
    maxTraitPrice: number | null;
    maxPurchase: number | null;
    pauseAllBids: boolean;
    stopAllBids: boolean;
    cancelAllBids: boolean;
    triggerStopOptions: boolean;
  };
  bidDuration: { value: number; unit: string };
  tokenIds: (number | string)[];
  bidType: string;
  loopInterval: { value: number; unit: string };
  bidPriceType: string;
  slugValid: boolean;
  magicEdenValid: boolean;
  blurValid: boolean;
}

export const convertCSVToTasks = (csvContent: string): Task[] => {
  const { data } = Papa.parse(csvContent, {
    header: true,
    skipEmptyLines: true,
  });

  return data.map((row: any) => {
    // Parse JSON strings
    const selectedTraits = JSON.parse(row.selectedTraits || '{}');
    const traits = JSON.parse(row.traits || '{}');
    const tokenIds = JSON.parse(row.tokenIds || '[]');
    const selectedMarketplaces = JSON.parse(row.selectedMarketplaces || '[]');

    // Convert string boolean values to actual booleans
    const stringToBoolean = (value: string) => value.toLowerCase() === 'true';

    // Convert string numbers to actual numbers or null
    const stringToNumberOrNull = (value: string) => {
      if (value === '' || value === 'null') return null;
      const num = Number(value);
      return isNaN(num) ? null : num;
    };

    const task: Task = {
      _id: row._id || crypto.randomUUID(),
      user: row.user || '',
      contract: {
        slug: row['contract.slug'] || '',
        contractAddress: row['contract.contractAddress'] || '',
      },
      wallet: {
        address: '', // Default empty as not in CSV
        privateKey: '', // Default empty as not in CSV
        openseaApproval: false,
        blurApproval: false,
        magicedenApproval: false,
      },
      selectedMarketplaces,
      running: stringToBoolean(row.running),
      tags: [{ name: "token bid", color: "#e7c208" }], // Default tag
      selectedTraits,
      traits,
      outbidOptions: {
        outbid: stringToBoolean(row['outbidOptions.outbid']),
        blurOutbidMargin: stringToNumberOrNull(row['outbidOptions.blurOutbidMargin']),
        openseaOutbidMargin: stringToNumberOrNull(row['outbidOptions.openseaOutbidMargin']),
        magicedenOutbidMargin: stringToNumberOrNull(row['outbidOptions.magicedenOutbidMargin']),
        counterbid: stringToBoolean(row['outbidOptions.counterbid']),
      },
      bidPrice: {
        min: Number(row['bidPrice.min']) || 0,
        max: stringToNumberOrNull(row['bidPrice.max']),
        minType: row['bidPrice.minType'] as "percentage" | "eth",
        maxType: row['bidPrice.maxType'] as "percentage" | "eth",
      },
      openseaBidPrice: {
        min: Number(row['openseaBidPrice.min']) || 0,
        max: stringToNumberOrNull(row['openseaBidPrice.max']),
        minType: row['openseaBidPrice.minType'] as "percentage" | "eth",
        maxType: row['openseaBidPrice.maxType'] as "percentage" | "eth",
      },
      blurBidPrice: {
        min: Number(row['blurBidPrice.min']) || 0,
        max: stringToNumberOrNull(row['blurBidPrice.max']),
        minType: row['blurBidPrice.minType'] as "percentage" | "eth",
        maxType: row['blurBidPrice.maxType'] as "percentage" | "eth",
      },
      magicEdenBidPrice: {
        min: Number(row['magicEdenBidPrice.min']) || 0,
        max: stringToNumberOrNull(row['magicEdenBidPrice.max']),
        minType: row['magicEdenBidPrice.minType'] as "percentage" | "eth",
        maxType: row['magicEdenBidPrice.maxType'] as "percentage" | "eth",
      },
      stopOptions: {
        minFloorPrice: stringToNumberOrNull(row['stopOptions.minFloorPrice']),
        maxFloorPrice: stringToNumberOrNull(row['stopOptions.maxFloorPrice']),
        minTraitPrice: stringToNumberOrNull(row['stopOptions.minTraitPrice']),
        maxTraitPrice: stringToNumberOrNull(row['stopOptions.maxTraitPrice']),
        maxPurchase: stringToNumberOrNull(row['stopOptions.maxPurchase']),
        pauseAllBids: stringToBoolean(row['stopOptions.pauseAllBids']),
        stopAllBids: stringToBoolean(row['stopOptions.stopAllBids']),
        cancelAllBids: stringToBoolean(row['stopOptions.cancelAllBids']),
        triggerStopOptions: stringToBoolean(row['stopOptions.triggerStopOptions']),
      },
      bidDuration: {
        value: Number(row['bidDuration.value']) || 0,
        unit: row['bidDuration.unit'] || '',
      },
      tokenIds,
      bidType: row.bidType || '',
      loopInterval: {
        value: Number(row['loopInterval.value']) || 0,
        unit: row['loopInterval.unit'] || '',
      },
      bidPriceType: row.bidPriceType || '',
      slugValid: stringToBoolean(row.slugValid),
      magicEdenValid: stringToBoolean(row.magicEdenValid),
      blurValid: stringToBoolean(row.blurValid),
    };

    return task;
  });
};

// Example usage:
// const tasks = convertCSVToTasks(csvContent);